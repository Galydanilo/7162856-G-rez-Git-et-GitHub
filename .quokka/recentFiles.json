{"projects":{"c:\\users\\mrgal\\onedrive\\bureau\\js_lesbases":{"interactive-demo":{"fileId":"interactive-demo","path":"quokka.js","scratchFile":true,"content":"/* We've started Quokka for you automatically on this file.\n *\n * To open a new Quokka file:\n *   - Press `Ctrl K, J` to create a new JavaScript File\n *   - Press `Ctrl K, T` to create a new TypeScript File\n *   - Press `Ctrl K, L` to open an interactive sample from:\n *     https://github.com/wallabyjs/interactive-examples\n *\n * To start/restart Quokka on an existing file:\n *   - Press `Ctrl K, Q`\n*/\n\n// See the output of console.log right next to your code\nconst quokka = { isAwesome: true };\n\nconsole.log(quokka);\n\n// See the value of a variable simply by typing its name\nquokka;\n\n// Use sequence expression to compare objects\nconst wallaby = { \"is Quokka's BigBrother\": true };\n\n(quokka, wallaby)\n\n// Gutter indicators show what code was executed (code coverage)\n\n// Orange indicators means only part of the line was executed\n// because JavaScript stops processing after first false value\nconsole.log('partialCoverage', false && true);\n\n// Green indicators means that Quokka executed all statements\n// on a line of code\nif (false) {\n  // White indicators means that a line of code was never\n  // executed by Quokka\n  console.log('noCoverage', true);\n}\n\n// Red indicators show where an error occurred. The error message\n// is also shown beside the error\nthrow new Error('Something went wrong');\n\n// There's a lot more Quokka can do! Visit our docs to learn more:\n// - https://quokkajs.com/docs/\n","ts":1705322728337,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\JS_LesBases"},"s1w60":{"fileId":"s1w60","path":"quokka.js","scratchFile":true,"content":"const user = {\r\n  /*clef*/name: /*valeur*/'Martin',\r\n  age: 42,\r\n  size: 190\r\n}\r\n\r\nconsole.log(user) // affiche {name: 'Martin, age: 42, size: 190}\r\n\r\nconsole.log(user.name) // affiche Martin\r\n\r\nconst key = \"age\";\r\n\r\n//console.log(user.key) = affiche rien car il cherche key dans l'objet user\r\nconsole.log(user[\"age\"]); // affiche 42\r\n\r\n// tableau ( un tableau est deja un objet)\r\n\r\n// objet / tableau => Type de référence\r\n// string / number ... => Type primitif\r\n\r\nlet test = 0;\r\nlet test1 = test;\r\ntest1 = 44;\r\n\r\n//      index : 0, 1, 2, 3, 4, 5 \r\nconst number1 = [1, 2, 3, 4, 5, 6];\r\n\r\nconst number2 = number1\r\n\r\nnumber2[0] = 44 // affiche [44, 2, 3, 4, 5, 6]\r\n\r\nconsole.log(number1)  // // affiche [44, 2, 3, 4, 5, 6]\r\n\r\nconsole.log(\"--------------\")\r\n\r\nnumber1[1] = 55; \r\n\r\n// number2 = [44, 55, 3, 4, 5, 6]\r\n\r\n// pour cela que avec const on peut modifier ça référence mais pas ça valeur\r\n\r\n\r\nconsole.log(number1) // affiche [1, 2, 3, 4, 5, 6]\r\n// pour récupérez un élément du tableau on devra  écrire comme cela\r\n\r\nconsole.log(number1[0]); // affiche 1\r\n\r\nnumber1[0] = 44;\r\n\r\nconsole.log(number1[0]); // affiche 44\r\n\r\nnumber1.test = 44;  // affiche [44, 2, 3, 4, 5, 6]\r\n\r\n/* différence entre une valeur primitive et une référence\r\n\r\nles valeur primitive se copie a chaque déclaration alors que \r\nles référence copie leur références*/\r\n\r\n// exemple\r\n\r\nlet nombre1 = [1, 2, 3, 4, 5, 6];\r\n\r\nnombre1[0] = 44; \r\n\r\n\r\n\r\n// affiche [44, 2, 3, 4, 5, 6]\r\n\r\nnombre1 = [1, 2, 3]; //  en faisant cela je viens de supprimez l'addresse [44, 2, 3, 4, 5, 6];","ts":1705325175400,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\JS_LesBases"},"5jtjv":{"fileId":"5jtjv","path":"quokka.js","scratchFile":true,"ts":1705411770310,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\JS_LesBases"},"335p5":{"fileId":"335p5","path":"quokka.js","scratchFile":true,"content":"const date = new Date (2023, 2, 1, 10, 30, 12);\r\n\r\nlet heure = date.getHours() + ' heures' + ' '+  date.getMinutes() + ' minutes'\r\n\r\nconsole.log(heure); // '10 heures 30 minutes'\r\n\r\n\r\n// correction \r\n\r\n/*const date = new Date (2023, 2, 1, 10, 30, 12);\r\n\r\nlet heure = `${date.getHours()} heures et ${date.getMinutes()} minutes`;\r\n\r\nconsole.log(heure);*/ // 10 heures et 30 minutes\r\n\r\nconst date1 = new Date (2023, 4, 1);\r\n\r\ndate1.setDate(28);\r\n\r\nconsole.log(date1.toLocaleDateString());\r\n\r\nclass Evenement {\r\n  constructor(date, evenement) {\r\n    this.date = date;\r\n    this.evenement = evenement;\r\n  }\r\n\r\n  getResume() {\r\n    console.log(this.date.getDate() + \"/\" + this.date.getMonth() + \" : \" + this.evenement)\r\n  }\r\n}\r\n\r\nconst dt = new Date(2023, 10, 20);\r\n\r\nconst event = new Evenement(dt, \"rdv medical\");\r\n\r\nevent.getResume(); //appel de la méthode\r\n\r\n\r\nconst date3 = new Date (2023, 10, 2);\r\n\r\ndate3.setFullYear(2024);\r\n\r\nconsole.log(date3.toLocaleDateString());\r\n\r\nconst date6 = new Date (\"2023-12-01T14:30:00+04:00\");\r\n\r\nconsole.log(date6.getUTCHours());","ts":1705415869616,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\JS_LesBases"},"7hn2a":{"fileId":"7hn2a","path":"quokka.js","scratchFile":true,"content":"export default class Formulaire {\r\n\r\n  // définition du constructeur\r\n\r\n  constructor(id) {\r\n    this.id = id\r\n    this.formulaireHtml = document.getElementById(this.id);\r\n    this.formdata = new FormData(this.formulaireHtml);\r\n    this.aswers = new Array();\r\n  }\r\n\r\n  // methode pour le div parent\r\n\r\n  getDiv(id) {\r\n    return document.getElementById(id).parentNode;\r\n  }\r\n\r\n  // methode pour récupérez un élément\r\n\r\n  getElement(id) {\r\n    return document.getElementById(id);\r\n  }\r\n\r\n  // methode permettant de masquer un élément sans animation\r\n\r\n  maskChamp(id) {\r\n    this.getDiv(id).classList.add('masque');\r\n    this.getElement(id).required = false;\r\n  }\r\n\r\n  // méthode permettant d'afficher le champ\r\n\r\n  showChamp(id) {\r\n    this.getDiv(id).classList.remove('disp');\r\n    this.getDiv(id).classList.add('app');\r\n    this.getElement(id).required = true;\r\n  }\r\n\r\n  // méthode permettant de masquer le champ avec animation\r\n\r\n  hideChamp(id) {\r\n    this.getDiv(id).classList.remove('app');\r\n    this.getDiv(id).classList.add('disp');\r\n    this.getElement(id).required = false;\r\n  }\r\n\r\n  // méthode pour savoir si un radio est séléctionner\r\n\r\n  isSelected(id, value, action, otherAction) {\r\n    this.formdata = new FormData(this.formulaireHtml);\r\n    if(this.formdata.get(id) = value) {\r\n      action();\r\n    }\r\n    else {\r\n      otherAction();\r\n    }\r\n  }\r\n}","ts":1705427790364,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\JS_LesBases"}},"c:\\users\\mrgal\\downloads\\solutionexercicedefi-master":{"n9f7l":{"fileId":"n9f7l","path":"quokka.js","scratchFile":true,"content":"/* Afficher en console les tables de multiplicataion de 1 à 9 */\r\n\r\n//Parcourir les tables de 1 à 9  \r\nfor (let multiplicateurTable = 1; multiplicateurTable < 10; multiplicateurTable++) {\r\n  //Pour chaque table, parcourir, tous les multiplicateurs (1 à 9)\r\n  console.log(`=== table de  ${multiplicateurTable} ===`);\r\n  for(let multiplicateur = 1; multiplicateur < 10; multiplicateur++){\r\n      let resultat = multiplicateurTable * multiplicateur;\r\n      console.log(`${multiplicateurTable} x ${multiplicateur} = ${resultat}`);\r\n  }\r\n} \r\n\r\nlet chaise = 120.50\r\nlet table = 1200.99\r\nlet vase = 420.01\r\nlet canape = 12585.55\r\nconst prices = [120.50,1200.99,420.01,12585.55]\r\n\r\n//Pour appeler ma fonction, il faudra que je passe le paramètre prix initial\r\n//let prixFinal = ApplyPromo(120)\r\nfunction getPromoPrice(prixInitial, remise){\r\n    //10 - 25 % => 10 - (10 * 0.25)\r\n\r\n    let prixFinal = prixInitial - (prixInitial * (remise / 100))\r\n    return prixFinal;\r\n}\r\n\r\nfunction roundTOSup(number){\r\n    let numberFCent = number * 100;\r\n    let numberArrondiF100 = Math.ceil(numberFCent);\r\n    return numberArrondiF100/100;\r\n}\r\n\r\nfunction replaceDotByEur(number){\r\n    let prixString = number.toString();\r\n    let prixWithEur = prixString.replaceAll('.', ',');\r\n    prixWithEur += \"€\";\r\n    return prixWithEur;\r\n}\r\n\r\n//Boucle sur les prix\r\nprices.forEach(prix => {\r\n    let prixPromo = getPromoPrice(prix, 25);\r\n    prixPromo = roundTOSup(prixPromo);\r\n    console.log(replaceDotByEur(prixPromo));\r\n})","ts":1705441754174,"projectRoot":"C:\\Users\\MrGal\\Downloads\\SolutionExerciceDefi-master"}},"c:\\users\\mrgal\\onedrive\\bureau\\cours-jsgrafikart":{"pg1wg":{"fileId":"pg1wg","path":"quokka.js","scratchFile":true,"content":"// les methode (qui sont des fonction)\r\n\r\nconst b = {\r\n  firstname: 'John',\r\n  lastname: 'Doe',\r\n  fullname1: function () {\r\n    console.log(` ${this.firstname}  ${this.lastname}`) // affiche John Doe\r\n  }\r\n}\r\n\r\nb.fullname1()\r\n\r\nconsole.log('Hello'.toUpperCase()) // affiche HELLO\r\n\r\n// fonction fléché\r\n\r\n// la fonction fléché ne modifie pas le This\r\n\r\n\r\nconst myFunction = (param1, param2) => {\r\n  console.log(param1, param2, this) // affiche 3, 1\r\n}\r\n\r\nmyFunction(3,1, 2);\r\n\r\n// avec la syntaxe de base avec le mot function le this serait apparu\r\n\r\n\r\n// pas besoin du mot clef return quand il n'y a pas de condition\r\n\r\nconst somme = (a, b) => a +b\r\nconsole.log(somme(1,2)) // affiche 3\r\n\r\n\r\n// passez des fonctions en paramètre de fonction\r\n\r\nconst isPair = function(nb , cb) {\r\n  if(nb % 2 === 0) {\r\n    cb(nb) // cb pour callback\r\n  }\r\n}\r\n\r\nisPair(4, function (n) {\r\n  console.log('Mon nombre est pair ' + n) // affiche mon nombre est pair 4\r\n})\r\n\r\n// exercice\r\n\r\n// crée un nombre aléatoire entre 0 et 10\r\n// 3 essaie pour devinez le mot\r\n//isRight(n) qui renvoi true / false si l'utilisateur a bon ou non\r\n// guess() demande a l'utilisateur de choisir un mot \r\n\r\nlet chiffre = prompt('chosissez un chiffre entre 0 et 10');\r\n\r\nfunction isRight(n) {\r\n  if( chiffre > 10 || chiffre < 0) {\r\n    return true\r\n  }\r\n  else {\r\n    for(n = chiffre; n >= 0; n--) {\r\n      return false\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nlet word = prompt(\"devinez le mot\")\r\n\r\nfunction Guess() {\r\n  if(word === \"grafikart\") {\r\n    return true\r\n  }\r\n  else {\r\n    for(let i = 3; i != word; i--) {\r\n      console.log(\"encore une chance\")\r\n    }\r\n    return false\r\n  }\r\n}","ts":1705654484399,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\cours-JSGrafiKart"},"k1gmx":{"fileId":"k1gmx","path":"quokka.js","scratchFile":true,"content":"const notes = [12, 13, 16, 8];\r\nfor(let k = 0; k < notes.length; k++) {\r\n  console.log(k); // affiche 0, 1, 2, 3 ( pour dire qu'il y a 4 élément dans le tableaux)\r\n  console.log(notes[k]); // affiche les éléments du tableaux 12, 13, 16, 8\r\n}","ts":1705848765393,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\cours-JSGrafiKart"},"hfl7q":{"fileId":"hfl7q","path":"quokka.js","scratchFile":true,"ts":1706482638170,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\cours-JSGrafiKart"},"vflsx":{"fileId":"vflsx","path":"quokka.js","scratchFile":true,"content":"let nombre = 8;\r\n\r\nfunction tableMul() {\r\n  for(let i = 1; i <= 10; i++) {\r\n    console.log(nombre * i);\r\n  }\r\n}\r\n\r\ntableMul();\r\n\r\nnombre = 7;\r\n\r\ntableMul();\r\n\r\n// function avec paramètre\r\n\r\nfunction calcDouble(nb) {\r\n  let double = nb * 2;\r\n  console.log(\"Le double du nombre \" + nb + \" est \" + double);\r\n}\r\n\r\ncalcDouble(100); //Le double du nombre 100 est 200\r\n\r\ncalcDouble(40); //Le double du nombre 40 est 80\r\n\r\nfunction aire(rayon, type) {\r\n  if(type == 'cercle') {\r\n    return (Math.PI * (rayon ** 2));\r\n  }\r\n  else if(type == \"sphere\") {\r\n    return (4 * Math.PI *(rayon ** 2));\r\n  }\r\n  else return 0\r\n}\r\n\r\n\r\nconsole.log(aire(5, 'cercle'));\r\nconsole.log(aire(5, 'sphere'))\r\n\r\n// exemple de return a ne pas faire\r\n\r\nfunction carre (nb) {\r\n  let c = nb ** 2;\r\n  return c; // met fin a la function\r\n  console.log(\"le carré est \" + c)\r\n}\r\n\r\nconsole.log(carre(5))\r\n\r\n// comment créer une fonction via une expression ?\r\n\r\nlet racine = function racineCarree (nombre) {return Math.sqrt(nombre);};\r\nconsole.log(racine(5))\r\n\r\n// function anonyme\r\n\r\nlet racine1 = function (nombre) {return Math.sqrt(nombre);};\r\nconsole.log(racine1(9));\r\n\r\nfunction carre (a) {\r\n  return a ** 2\r\n  console.log (\"Le carré de \" + a + \" est \" + a ** 2)\r\n}\r\n\r\ncarre (4); \r\n\r\n\r\nlet stock = 4029;\r\n\r\nlet solde = 0;\r\n\r\nfunction saleItem(Item, price) {\r\n  stock  -= Item;\r\n  let total = Item * price;\r\n  solde += total\r\n  return total\r\n}\r\n\r\nconsole.log(saleItem(104, 10.50)) // 1092\r\nconsole.log(stock) // 3925\r\nconsole.log(solde) // 1092\r\n\r\nfunction  infoMagasin() {\r\n  let solde1 =` Stock du magasin : ${stock} produit \\n solde total : ${solde} euros`;\r\n  return solde1\r\n}\r\n\r\n","ts":1706520199411,"projectRoot":"C:\\Users\\MrGal\\OneDrive\\Bureau\\cours-JSGrafiKart"}},"e:\\wiki_search":{"0dx87":{"fileId":"0dx87","path":"quokka.js","scratchFile":true,"content":"async function exempleAsynchrone() {\r\n  console.log(\"Début de la fonction\");\r\n\r\n  // Une opération asynchrone (peut être une promesse, une requête AJAX, etc.)\r\n  const resultat = await operationAsynchrone();\r\n\r\n  console.log(\"Fin de la fonction avec le résultat :\", resultat);\r\n}\r\n\r\nfunction operationAsynchrone() {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(\"Résultat de l'opération asynchrone\");\r\n    }, 2000);\r\n  });\r\n}\r\n\r\nexempleAsynchrone();\r\n","ts":1706967443526,"projectRoot":"E:\\wiki_Search"}}},"total":11}